def identify_signal(signal_stream):
    valid_pattern_seq = {
        'a': '?',
        'b': '?',
        'c': '?',
        'd': '?',
        'e': '?',
        'f': '?',
        'g': '?'}

    for i, signal in enumerate(signal_stream):
        sig_patterns = signal[0].split(' ')
        sequences = signal[1].split(' ')
        # print(sig_patterns, " ", sequences)
        guessPatterns(i, sig_patterns, valid_pattern_seq)
        break

def guessPatterns(i, sig_patterns, valid_pattern_seq):
    ''' Using the unique pattern numbers identify/guess the signals'''

    sig_pattern_sorted = []
    for sig in sig_patterns:
        sig_pattern_sorted.append(''.join(sorted(sig)))

    sig_patterns = sig_pattern_sorted

    corrupt_digits = {
        '0': '?',
        '1': '?',
        '2': '?',
        '3': '?',
        '4': '?',
        '5': '?',
        '6': '?',
        '7': '?',
        '8': '?',
        '9': '?'
    }

    n = 0
    for combination in itertools.permutations('abcdefg'):
        list_combination = list(combination)
        valid_pattern_seq['a'] = list_combination[0]
        valid_pattern_seq['b'] = list_combination[1]
        valid_pattern_seq['c'] = list_combination[2] 
        valid_pattern_seq['d'] = list_combination[3]
        valid_pattern_seq['e'] = list_combination[4]
        valid_pattern_seq['f'] = list_combination[5]
        valid_pattern_seq['g'] = list_combination[6]
        createCorruptDigitMap(valid_pattern_seq, corrupt_digits)
        print("Checking Validity of {0} and {1}".format(sig_patterns, corrupt_digits))
        valid = checkValidity(sig_patterns, corrupt_digits)
        n += 1
        if valid:
            print("Found valid combination".format(corrupt_digits))
            break
        else:
            print("Invalid combination".format(corrupt_digits))
            if n == 999999999:
                break



    return corrupt_digits

def createCorruptDigitMap(valid_pattern_seq, corrupt_digits):
    #Based on calculated valid_pattern_seq we should see below seq in the 
    digits = {
        '0': 'abcdef',
        '1': 'cf',
        '2': 'acdeg',
        '3': 'acdfg',
        '4': 'bcdf',
        '5': 'abdfg',
        '6': 'abdefg',
        '7': 'acf',
        '8': 'abcdefg',
        '9': 'abcdfg'
    }

    #Create dict of invalid pattern swq
    for key, value in digits.items():
        list_dig = list(value)
        corrupt_dig = []
        for dig in list_dig:
            corrupt_dig.append(valid_pattern_seq[dig])
        
        corrupt_digits[key] = ''.join(sorted(corrupt_dig))

    print(corrupt_digits)

def checkValidity(sig_patterns, corrupt_digits):
    valid = True
    for pattern in sig_patterns:
        if not pattern in corrupt_digits.values():
            print("{0} not in corrupt digits".format(pattern))
            valid = False

    return valid



#https://adventofcode.com/2021/day/8

import os, sys
import itertools
import pprint

def getInput():
    with open(os.path.join(sys.path[0], "input_test1.txt")) as file_in:
        signal_stream = []
        for line in file_in:
            signal = (line.strip().split('|'))
            signal_stream.append(list(map(str.strip, signal)))

    return signal_stream

def getOutputValues(signal_stream):
    # sig_freq = {
    # 'a' : 8, #x
    # 'b' : 6, #
    # 'c' : 8, #x
    # 'd' : 8, # 
    # 'e' : 4, #test? #x
    # 'f' : 9, #test? #x
    # 'g' : 6, #
    # }

    valid_digits = {
        '0': 'abcefg',
        '1': 'cf',
        '2': 'acdeg',
        '3': 'acdfg',
        '4': 'bcdf',
        '5': 'abdfg',
        '6': 'abdefg',
        '7': 'acf',
        '8': 'abcdefg',
        '9': 'abcdfg',
    }

    '''
     For each sequence
        We want to see if a permutation of "abcdefg" matches
    '''
    for signal in signal_stream:
        #Ensure 10 input strings are alphabetically sorted
        input = sortSignalStream(signal[0])
        output = sortSignalStream(signal[1])

        potential_seq_count = 0
        key = {}
        print("Signal Stream:  {0}".format(input))
        for possible_seq in itertools.permutations("abcdefg"):
            
            for letter in "abcdefg":
                key[letter] = possible_seq["abcdefg".index(letter)]
            
            potential_seq_count+=1

            if test_candidates(key, output):
                # print("PASSSED!!")
                print("Potential Sequence #{0}: {1}".format(potential_seq_count, key, valid_digits))
                break

            #ToDo: Can discard candidates based on criterias
            #Test if possible_seq qualifies?
            # if not input.count(key['e']) == 4:
            #     # print("{0} != 4 times".format(key['e']))
            #     continue
            # elif not input.count(key['b']) == 6:
            #     # print("{0} != 6 times".format(key['b']))
            #     continue
            # elif not input.count(key['g']) == 6:
            #     # print("{0} != 6 times".format(key['g']))
            # #     continue
            # elif not input.count(key['d']) == 8:
            #     # print("{0} != 4 times".format(key['e']))
            #     continue
            # elif not input.count(key['f']) == 9:
            #     # print("{0} != 9 times".format(key['e']))
            #     cf = key['c'] + key['f']
            #     cf = ''.join(sorted(cf))
            #     if not input.count(cf) == 1:
            #         # print("{0} != 1 time".format(cf))
            #         continue
            #     else:
            #         acf = key['a'] + key['c'] + key['f']
            #         acf = ''.join(sorted(acf))
            #         if not input.count(acf) == 1:
            #             # print("{0} != 1 time".format(acf))
            #             continue
            #         else:
            #             bcdf = key['b'] + key['c'] + key['d'] + key['f']
            #             bcdf = ''.join(sorted(bcdf))
            #             if not input.count(bcdf) == 1:
            #                 # print("{0} != 1 time".format(bcdf))
            #                 continue
            #             else:
            #                 abcdefg = key['a'] + key['b'] + key['c'] + key['d'] + key['e'] + key['f'] + key['g']
            #                 abcdefg = ''.join(sorted(abcdefg))
            #                 if not input.count(abcdefg) == 1:
            #                     # print("{0} != 1 time".format(abcdefg))
            #                     continue
            #                 else: 
            #                     print("Candidate! Seq#{0}: {1}".format(potential_seq_count, key))
            #                     if test_candidates(key, output):
            #                         print("PASSSED!!")


        #print("Potential Sequence #{0}: {1}".format(potential_seq_count, key))

def test_candidates(key, output, valid_digits):
    valid_digits = {
        '0': 'abcefg',
        '1': 'cf',
        '2': 'acdeg',
        '3': 'acdfg',
        '4': 'bcdf',
        '5': 'abdfg',
        '6': 'abdefg',
        '7': 'acf',
        '8': 'abcdefg',
        '9': 'abcdfg',
    }

    for string in output.split(' '):
        pattern = ''
        for char in string:
            tmp = get_keys_from_value(key,char) #reverse
            pattern += tmp[0]
        # print("Checking {0} is valid for {1}".format(pattern, string))
        pattern = sortSignalStream(pattern)
        #Is that a valid entry in digits
        if not pattern in digits.values():
            # print("{0} is not a valid digit".format(pattern))
            return False

    return True

def get_keys_from_value(d, val):
    return [k for k, v in d.items() if v == val]


def find_unq_seq(signal_stream):
    unique_sec_occurrence = 0
    for signal in signal_stream:
        sequences = signal[1].split(' ')
        # print(sequences)
    
        for seq in sequences:
            # print(seq, len(seq))
            if len(seq) in [2,3,4,7]: #Unique sec length
                unique_sec_occurrence+=1
                
    return unique_sec_occurrence
    digits = {
        '0': 'abcdef',
        '1': 'cf',
        '2': 'acdeg',
        '3': 'acdfg',
        '4': 'bcdf',
        '5': 'abdfg',
        '6': 'abdefg',
        '7': 'acf',
        '8': 'abcdefg',
        '9': 'abcdfg'
    }


def sortSignalStream(pattern):
    pattern = pattern.split(' ')
    
    sorted_pattern = []
    for string in pattern:
        tmp = sorted(string)
        sorted_pattern.append(''.join(tmp))

    return ' '.join(sorted_pattern)


if __name__ == "__main__":
    signal_stream = getInput()
    # print(signal_stream)

    # part1 = find_unq_seq(signal_stream)
    # print("Part 1: {0}".format(part1))

    # part2 = identify_signal(signal_stream)
    # print("Part 2: {0}".format(part2))

    part2 = getOutputValues(signal_stream)
    print("Part 2: {0}".format(part2))







